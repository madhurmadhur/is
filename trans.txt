import java.util.ArrayList;
import java.util.Scanner;


public class Prac2 {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        
        System.out.println("Enter the text");
        String text;
        text = sc.nextLine();
        int i=0;
        
        text = preprocess(text);
        
        System.out.println("Enter key in Numeric form ");
        String key = sc.nextLine();
        
        char cmat[][] = Encrypt(text,key);
        StringBuilder sb = new StringBuilder();
        for(i=0;i<cmat.length;i++)
        {
            for(int j=0;j<cmat[0].length;j++)
            {
                sb.append(cmat[i][j]);
            }
        }
        String firstEncrypt = sb.toString();
        System.out.println("After First Transposition : " + firstEncrypt);
        
        char cmat1[][] = Encrypt(firstEncrypt,key);
        sb = new StringBuilder();
        for(i=0;i<cmat1.length;i++)
        {
            for(int j=0;j<cmat1[0].length;j++)
            {
                sb.append(cmat1[i][j]);
            }
        }
        String secondEncrypt = sb.toString();
        System.out.println("After Second Transposition : " + secondEncrypt);
        
        
        char demat[][] = decryptSingle(key, cmat1);
        System.out.println("");
        char demat2[][] = decryptSingle(key, cmat);
        System.out.println("");
        sb = new StringBuilder();
        for(i=0;i<demat2.length;i++)
        {
            for(int j=0;j<demat2[0].length;j++)
            {
                sb.append(demat2[i][j]);
            }
        }
        String decrypt = sb.toString();
        System.out.println("After Decryption Transposition : " + decrypt);
        
    }
    
    static char[][] Encrypt(String text,String key)
    {
        int i=0;
       
        String temp[] = key.split(" ");
        int arrkey[] = new int[temp.length];
        for(i=0;i < temp.length;i++)
        {
            arrkey[i] = Integer.parseInt(temp[i]);
        }
        key = key.replace(" ", "");

        char c[] = text.toCharArray();
        double tlen = text.length();
        double klen = key.length();
        int row = (int)Math.ceil(tlen/klen);
        char mat[][] = new char[row][(int)klen];
        int k=0;
        for(i=0;i<mat.length;i++)
        {
            for(int j=0;j<mat[0].length;j++)
            {
                if(k<c.length)
                    mat[i][j] = c[k];
                else
                    mat[i][j] = '*';
                k++;
            }
            
        }
        char cmat[][] = new char[(int)klen][row];
        
        
        
        for(i=0;i<cmat.length;i++)
        {
            for(int j=0;j<cmat[0].length;j++)
            {
                cmat[i][j] = mat[j][arrkey[i]-1];
                
            }
        }
        
        return cmat;
    }
    
    static String preprocess(String text)
    {
        char c[] = text.toCharArray();
        int i=0;
        for(char ch : c )
        {
            if(Character.isUpperCase(ch))
                c[i] = Character.toLowerCase(ch);
            i++;
        }
        text = new String(c);
        text = text.replace(" ", "");
        System.out.println(text);
        return text;
    }
    
     
    static char[][] decryptSingle(String key,char cmat[][])
    {
        
        String temp[] = key.split(" ");
        int arrkey[] = new int[temp.length];
        for(int i=0;i < temp.length;i++)
        {
            arrkey[i] = Integer.parseInt(temp[i]);
        }
        
        
         char demat[][] = new char[cmat[0].length][cmat.length];
        
        for(int i=0;i < demat.length;i++)
        {
            for(int j=0;j<demat[0].length;j++)
            {
                demat[i][arrkey[j]-1] = cmat[j][i];
            }
        }
        
        for(int i=0;i<demat.length;i++)
        {
            for(int j=0;j<demat[0].length;j++)
            {
                System.out.print(demat[i][j]);
            }
        }
        
        return demat;
    }
}





import java.util.Scanner;
import java.util.StringTokenizer;

public class transpositionCipher {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        System.out.println("Transposition Cipher Simulation");
        System.out.println("Enter the text");
        String input = sc.nextLine();
        System.out.println("Enter the key");
        String key = sc.nextLine();
        int keyInt[] = processKeyInt(key);
        String cipherText = transposition(input, keyInt);
        System.out.println("Do you want to Double Transpose 0 or 1");
        int ch = sc.nextInt();
        if(ch == 1)
        {
            cipherText = transposition(cipherText, keyInt);
        }
        int dkey[] = deCipherKey(keyInt);
        String decipher = deCipher(cipherText, dkey);
        if(ch == 1)
            decipher = deCipher(decipher, dkey);
    }
    
    static int[] deCipherKey(int key[])
    {
        int dKey[] = new int[key.length];
        for(int i=0;i<key.length;i++)
        {
            dKey[key[i]-1] = i ;
        }
        System.out.println("\n\nDeCipher Key : ");
        for(int i=0;i<key.length;i++)
        {
            System.out.print(dKey[i]);
        }
        System.out.println("\n");
        return dKey;
    }
    
    static String deCipher(String cipher, int[] key)
    {
         int div = cipher.length()/key.length;

        int row,col;
        col = key.length;
        row = (int) div;
        
        System.out.println("\n\nMatrix");
        
        char inputChar[] = cipher.toCharArray();
        char matrix[][] = new char[row][col];
        int k=0;
        for(int i=0;i<matrix[0].length;i++)  
        {
            for(int j=0;j<matrix.length;j++)
            {
                matrix[j][i] = inputChar[k];
                k++;
            }
        }
        
        for(int i=0;i<matrix.length;i++)  
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        
        
        char decipher[][] = new char[matrix.length][matrix[0].length];
        String decipherText = "";
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                decipher[i][key[j]] = matrix[i][j];
            }
        }
        
              System.out.println("Decipher Matrix");  
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                System.out.print(decipher[i][j] + " ");
            }
            System.out.println();
        }        
        for(int i=0;i<decipher.length;i++)
        {
            for(int j=0;j<decipher[0].length;j++)
            {
                decipherText += decipher[i][j];
            }
        }
        
        System.out.println("Decipher Text : " + decipherText);
        
        return decipherText;
    }
    
    static String transposition(String s,int key[])
    {
        double div = (double)s.length()/(double)key.length;

        int row,col;
        col = key.length;
        if(div > Math.floor(div))
            row = (int) Math.ceil(div);
        else
            row = (int) div;

        char inputChar[] = s.toCharArray();
        char matrix[][] = new char[row][col];
        int k=0;
        System.out.println("Matrix");
        for(int i=0;i<matrix.length;i++)  
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                if( k >= s.length())
                {
                    matrix[i][j] = 'x';
                }
                else
                {
                    matrix[i][j] = inputChar[k];
                }
                k++;
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("\n\nCipher Matrix");
        char cipher[][] = new char[matrix.length][matrix[0].length];
        String cipherText = "";
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                cipher[i][key[j]-1] = matrix[i][j];
            }
        }
        for(int i=0;i<cipher[0].length;i++)
        {
            for(int j=0;j<cipher.length;j++)
            {
                cipherText += cipher[j][i];
            }
        }
        
        System.out.println("Cipher Text : " + cipherText);
        
        return cipherText;
    }

   static int[] processKeyInt(String key) {
       String k[] = key.split(" ");
       int kInt[] = new int[k.length];
       for(int i=0;i<k.length;i++)
       {
           kInt[i] = Integer.parseInt(k[i]);
       }
       return kInt;
    }
}